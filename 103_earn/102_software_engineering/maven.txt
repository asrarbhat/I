pluralsight:
    using maven 3.6 through 3.8
    maven is a build tool: to build source code and we get an artifact.
    it is good for dependency handling.
    an artifact would be a jar, zip etc.
    it handles dependencies and that is what it is mainly used for. You tell it and it downloads the dependencies.
    it can be looked as  a project management tool.
    it is managed by apache software foundation.
    it is open source.
    maven.apache.com to download.
    easy for repeatable builds.
    helps to externalize settings.
    transitive dependencies: it downloads dependencies of dependencies.
    preffered with jenkins for continuous integration.
    download binary zip for windows and tar for linux.
    add bin of it to environment variables.
    JAVA_HOME add path to it.
    MAVEN_HOME add maven to it.
        these two environment variables are necessary and you have to add the bin of mvn to path as well.
    these two you add to variables and in edit path %JAVA_HOME%\bin same for maven.
    in command prompt:
        try java to see java home is working.
        try mvn to see if mvn is working.
        mvn --version
        java --version
    maven also handles versioning and releases.
    it keeps a local repo in your system where it keeps downloaded dependencies and all projects can share it.
    it works nice with ide's.
    jenkins prefers maven.

    create a project folder: helloworld
    create a file in it pom.xml
        <project>
            <groupId>com.pluralsight</groupId>//it is like your website, so that it is easier to make it avaialbe to the world.
            <artifactId>helloworld<closeit> //our project/artifact
            <version>1.0-SNAPSHOT<closeit>
            <modelVersion>4.0.0<closeit> this is verison of pom. this has always been 4.0.0
            <packaging>jar<closeit>
        <closeit>
    create src folder, create main folder in src, create java folder in it, and in java folder create you package. src/main/java is what maven looks for.
    in project folder:
        mvn clean //it initilizes your directory and sets everything up, it downloads your dependencies as well, and it deletes all previously generated files and recreates them.
        mvn compile it complies, and downloads more dependencies and plugins.
        from java 10, you need <build> </build> and <plugins> </plugins> within it to build.
        so before </project> add <build> and within it <plugins> and <plugin> within it.and now close build.

        mandatory plugin
            <plugin>
                <groupId>org.apache.maven.plugin</>
                <artifactId>maven-compliler-plugin<>
                <version>3.8.0<>
                <configuration>
                    <release>12<>
                </configuration>
            </plugin>
        now mvn compile, you will find output in target/classes you can now run it.
        mvn package in target adn you get a jar file now.
        to run you just run from command line.

    structure:
        by default maven looks for src/main/java folder 
        it compiles our code to target directory and uses pom.xml for configuration and dependencies.
        your java code stays in src/main/java 
        test code stays at src/test/java for unit testing only, it is automated test. Hence tests are separate from source code.
        target is where everything gets compiled to. And our test are also ran from there, even artifact is saved there.
        groupId is the url in reverse.
        artifactId is the name of project folder.
        version is what we call it.
        src/main/groovy for groovy.

    dependencies are imported by naming convention:
            groupId, artifactId, version and transitive dependencies are also added.
        dependencies:
            within <project>
                <dependencies>
                    <dependency>
                        <groupId> eg org.apache.commns
                        <artifactId> commons-lang3
                        <verison> 3.8.1
                        these three are needed to download dependencies.
    goals/commands:
        clean : delete target 
        compile 
        package : for compile + jar 
        install : package + install in local repository  in home .m2 folder 
        deploy: install +  in remote repository
    
    put dependencies before plugins outside build within project.
        ide's download as soon as you modify the pom.xml file.
    dependencies are for project and plugins are for maven.
    dependencies are automatically added to classpath.

    to override the jar file name to be produced: <build> <finalName>abc</finalName>
    you override defaults in build section. Now abc.jar will be produced.

    SNAPSHOT== newest version.
        eg abc-1.0-SNAPSHOT.jar  it has to be in caps.
    packaging types: pom, jar, war etc all dependencies are downloaded and added to them.

    release is what the customer gets.
    transitive dependencies is main reason why people started using maven.
    scopes:
        compile, test, runtime, provided, system, import.
        compile is default scope.
        provided is a lot like compile.
        runtime is needed for execution.
        test for testing.
    
    repository:
        where plugins and dependencies are downloaded from.
        maven looks in your local repo first.
        ~/.m2/repository/groupId/artifactId
        repository http location:
            default repo.maven.apache.org
            it has allopensource projects.
        you can have corporate repository eg nexus or artifactory.
    dependency repo:
        repo for dependencies.
    eg spring has repo for itself.
    you can use repository tag to tell add new repositories to look at if you want dependencies to be downloaded from different repositories.
    you can set scope in <dependency> <scope> test</scope> for that dependency to be of that scope.
    super pom is the pom file that comes with maven and it has all defaults there, so don't edit it.
    there are repositories for plugins as well.
    plugins:
        goals: clean, compile, test, package, deploy etc these are plugins. and these are in superpom.
        these are different features of mvn.
        your pom is called effective pom.
        phases: validate, compile, test, package, integration test, verify, install.
        deploy is for remote repo.
        validate: to validate project and structure.
        after compile you test. test phase compiles test code, not the compile phase.

        you can override compiler plugin to newer java version. change release form 11 to 17.
        this you do in compiler plugin, maven-compiler-plugin 

        you can convert into maven project.
        pom viewer: to view pom better
        easy to add dependencies in ide 
        apt install maven in linux.
        mvnw maven wrapper, if you don't have maven installed, you can use this, it comes with projects.
        mvn validate.



