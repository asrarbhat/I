introduction:
    building java application with spring and hibernate.
    these are most popular frameworks in java.

spring overview:
    for enterprise java applications.
    similar to j2EE.
    we had servlets and jsp in 1999 in j2EE.
    J2EE had beans also.
    but j2ee was too tedious and error prone, and poor performance.
    hence we got spring finally.
    we got spring in 2004, and spring 4.3 in 2016.
    spring is most sought after java skill set by employers.
    you can learn spring or you can learn java EE or you can learn both.
    better learn both, they are similar.
    spring 5 was released in 2017
        they upgraded java requirements to java 8 or more.
        and MVC now use servlet api4.0
    this will cover mostly spring 4.
    official website: www.spring.io 
    think of java EE has another framework like spring.
    spring simplifies java enterprise development.
    goals of spring:
        lightweight development with java POJOs (plain old java objects)
        dependency injection to promote loose coupling.
        declarative programming with Aspect-Oriented-programming(AOP)
        minimize boilerplate java code.

    core containers:
        beans, core, spEL, Context.
        core container is the main thing in spring.
        factory for creating beans.
        manage bean dependencies.
    
    infrastructre:
        AOP, Aspects, instrumentation, messaging.
    
    Data Acess Layer:
        to communicate with database.
        it has jdbc, orm(object relational model to access database like jpa etc ), transactions, oxm, jms.
    
    web layer:
        servlet, websocket, web, portiet.
        for mvc.
    
    test layer:
        unit, integration, mock 

    spring projects:
        add ons on top of spring,
        spring cloud for cloud, etc even there is spring for andriod.
    

setting up development environment:
    spring5 requires java 8 or higher.
    java application server: tomcat
    ide: eclipse.
    
    tomcat 10 was released in 2002.
    tomcat9 works with spring5.
    download tomcat.
    tomcat runs on 8080 by default.
    and tomcat would run as a service at port 8080.
    downlaod eclipse for EE.
    you can connect your tomcat to your eclipse for easy deployment of applications from your eclipse.
    click on servers in the bottom and add tomcat 9.
    you can manually download spring jar files or use maven.
    create a java project in eclipse, don't create any module, create a new folder named lib in your project, go to spring go to artifacts and download spring recent dist.zip and copy all jar files from libs and paste in your lib folder. and add jar files to java build path in properties and java build path and then click on classpath and click on add jar and select all jar files.

spring inversion of control:
    IoC: the approach of outsourcing the construction and management of objects, and object factory handles objects.
    create a new package in your src eg com.abc.spring
    create classes in it.
    POJO: plain old java object. //normal kind of java.
    to be configurable means to have to make a change at configuration file and everything is done underneath. Interface gives us some kind of polymorphism.
    but in spring we have object factory, and we use configuration files to do our tasks, eg what implementation of interface we would use would be decided by configuration file, instead of us creating the object of specific implementation.

    Spring container:
        primary function:
            create and manage objects (inversion of control)
            inject object's dependencies(Dependency injection)
        configuring spring container:
            XML configuration file (legacy, but most legacy apps still use it)
            Java Annotation (modern)
            Java Source Code (modern)

            we will cover all three.
    
    Spring development process:
        configure your spring beans.
        create a spring container.
        retrieve beans from spring container.
    
        step1: configure your spring bean:
            <beans ...>
                <bean id="myCoach" class="com.abc.BaseballCoach">
            </beans>
        step2: create a spring container:
            spring container is generally known as ApplicationContext 
            Specialized implementation:
                ClassPathXmlApplicationContext
                AnnotationConfigApplicatonContext
                GenericWebApplicationContext
                others...
            
            ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");

        step3: Retrieve Beans from container by our application.
    
            Coach theCoach = context.getBean("myCoach", coach.class);
                here myCoach relates to the bean id and Coach.class is the name of the interface that BaseeballCoach implements.
        
    what is spring bean:
        a spring bean is a java object. When java objets are created by the spring container then spring refers to them as spring beans. they are created from normal java classes.
    
    in src paste applicationContext.xml 
        in it you define your beans:
            <bean id= "myCoach" class="com.company.CricketCoach"> </bean>
    
        within the package in your src, create a HelloSpringApp class with main method.

        public static void main(String[] args){

            //load the spring configuartion file 
            ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml"); //it could have been any name for configuration file. ClassPathXmlApplicationContext must be imported first.

            //retrieve bean from spring contaniner.
                Coach theCoach=context.getBean("myCoach",Coach.class); //here Coach is the interface.
                System.out.println(theCoach.getDailyWorkout);
            //call methods of the bean 
            //close the context
            context.close(); //to do the cleanup.
        }

        now run it as java application.
        now to configure, all you have to do is change the class to BaseballCoach in configuration file, we made no changes to code, which is amazing.
        

spring dependency injection:
    the client delegates the calls to another object the respoinsibility of prividing its dependencies.
    spring has object factory that has xml configuration file and it would provide the objects.
    there is constructor injection and setter injection.
    lets say you have an interface of a dependency and a few implementations.
    create a constructor that takes object of the interface type and set it to your object.
    create a bean in xml.
    to inject it to your object we put instead <bean of object that takes dependencies> <constructor-arg ref="myFortuneService"(id of dependency bean) /> </bean>
    now when spring reads your xml it creates objects for all beans and wherever you ask it also injects dependencies.
    #amazing.
    the name of the objects created by spring framework is same as the id you provide.
    class in xml has to be full package name till class.
    the java creates default constructor only if there isn't any, if you create one with paramter, java doesn't create one without parameters.
    you set using setter injection:
        in <bean> put <property name="fortuneService" ref..same/>
        it looks for setFortuneService.
    
    injecting literal values:
        <property name=.... value='3' /> 
    to read these things from a properties file instead of hardcoding in xml file.
    create abc.properties 
        foo.email=abc@d.com 
        load properite file to xml 
        <context:property-placeholder location='classpath:abc.properties"/>
        now use value="${foo.email}"


spring bean scopes and lifecycle:
    scopes refer to lifecycle of a bean 
    how long does the bean live.
    how many instances would be created, and how would it be shared.
    default scope is singleton:
        spring container creates only one instanc eof the bean by default and it is cached in memory, all requested would be shared reference to the same bean.
        hence if you use same context anywhere, changes reflect.
        <bean scope='singleton" ... 
    
        proptype scope: create new bean for each request even though container/context is same.
        request: scoped to a http web request.
        session: for http session.
        global-session: scoped for global http web session only for web apps.
    singleton is best as less beans are created.

    Bean Lifecycle:
        container started ---> Bean Instantiated ----> dependencies injected ----> Internal Spring Processing -----> YOur custom Init method--->your application runs ------->your custom destory method ------>stop

        you can add custom code during bean intialization.
        calling custom business logic methods.
        setting up handles to resources(db, sockets, file etc)

        you can add custom code during bean destruction
        calling custom business logic method.
        clean up handles to resources like db, sockets, files etc

        in <bean add init-method="doMyStartUpStuff"> same for destroy-method="whatever" 
        these methods cannot take any arugment they can have any access modifer and they can return anything.

        these methods are within the class.
        these are life cycle methods of beans also called hooks.
         
        for prototype scoped beans, spring does not call the destroy method,it just hands over object and doesn't care what happens to it. you have to do cleanup on your own applies to annotatins as well.
        
spring configuration with java annotatations:
    special labels markers added to java class
    provide meta-data about the class
    processed at compile tie or runtime for special processing.
    eg @Overtime it tell compiler hey we are overriding, now at compile time compiler will make sure that you method is overriding and is not different from original.
    it it fails we get error at time of compilation.
    why annotations:
        because xml configurations are verbose.
        this minimizes xml configuration.
    scanning for component classes:
        spring will scan your java classes for special annotations.
        it would automatically register the beans in the spring container.
        steps:
            enable compnent scanning in spring config file.
                <beans ...>
                    <context:component-scan base-package="com.abc.gg"/>
                </beans>
                spring scans recursively.
            add @Component Annotation to yoru java classes to register the beans
                @Component("thatSillyCoach")//that is bean id.
                @Component only would create a default bean id which is the classname with first letter in lower case.
            Retrieve beans from Spring container.
                Coach theCoach=context.getBean("thatSillyCoach",Coach.class)


constructor injection:
    for dependency injection spring can use auto wiring.
    spring will look for a class that matches the property, match by type: class or interface.
    spring will inject it automatically, hence it is autowired.
    spring scans all @Compnents
    there are constucor setter and field injection.

    private FortuneService fortuneService;
    @Autowired
    public TennisCoach(FortuneService theFortuneSearvice){
        fortuneService = theFortuneSearvice;
    }
    spring will fine a bean that implements FortuneService.
    if there are multiple implementations there is something called @Qualfier annotaion we will learn later.
    if there is just one constructor, then @Autowired is optional.
    if multiple constructors then atleast one must be annotated.
    but always used autowired.

setter injection:
    create setter method, configure iwth @autowired.
    just annoate setter method with @Autowired
    first the constructor is run and then teh annotated setters are called.

method injection:
    using any method.
    just autowire and method and its parameters will be passed as they are the beans and you can do anything with those beans.

field injection:
    just declare the field and annotate it with @Autowired, even for private fields, as it is done using reflections.
    @Autowired
    private FieldClass fieldName;
    no need to setter or constructor injection.
    if you are not modying this then you can just use it this way otherwise if you are changing use one with setters.
    you can use this instead of constructor injection.


Which injection type to use:
    stay consistent in your project.
    you get same functionality with all three.

Annotation Autowiring and Qualifiers:
    what if there are multiple implementations, which one will it pick?
        by default it fails to autowire.

        @Autowired
        @Qualfier("happyFortuneService")
        private FortuneService fortuneService;
        //here we are asking it to use happyFortuneService
        can apply for constructor or setter or field injection.

In Java, it is possible to apply multiple annotations to a single class. When multiple annotations are applied to a class, each annotation can provide additional metadata or behavior to the class, and the annotations are processed in a well-defined order.

The order in which annotations are processed is determined by their target. Annotations that target the class itself are processed first, followed by annotations that target the class's fields, methods, and constructors.

If multiple annotations target the same element, the order in which they are processed is not specified by the Java language specification. In practice, the order in which annotations are processed may depend on the order in which they are specified in the source code, or on the order in which they are returned by the reflection API.

It is also possible for multiple annotations to have conflicting behavior or metadata, in which case the behavior of the class may be ambiguous or undefined. It is the responsibility of the developer to ensure that any conflicting annotations are resolved in a way that is consistent with the desired behavior of the class.


for RESTFortuneService default mean would remain same since both first and second letter are cap.
for constuctor you have to use Qualfier instead the constructor with parameters:
    public TennisCoach(@Qualifiers("name") FortuneService fs){}
    you can inject values to your fields from a properties file.

    @Value("${foo.email}")
    private String email;

    but you can to add the properties file to your xml file first.


Bean Scopes with annotations:
    default scope is singleton.
    cached in memory and shared.
    to explicitly specify.

    @Component
    @Scope("singleton")
    public class Tennis implements Coach{}
    can put as prototype 

Bean life cycle methods:
    define you methods and then add annotaions to them.
    @PostCostruct 
    @PreDestroy
    these methods can have nay access modifier.
    void is preferred return type.
    there should be no arguments.
    for prototype scoped beans spring does not call th predestroy method.


spring configuration with java code and no xml:
    hence no xml at all.
    this is the third method of doing it and here we just write a java configuration class.

    package abc;

    @Configuration
    @ComponentScan("com.luv2code.springdemo")//this is optional
    public class SportConfig{

        //THIS ACTS LIEK THE XML FILE
    }    

    now you just read the class that you created.
    AnnotationConfigApplicationContext context new AnnotationConfigApplicationContext(SportConfig.class);
    now you can retrieve a bean.
    instead of @Bean at every class,
    you can put instead the configuartion class.
    like:
        @Bean
        public FortuneService sadFortuneService(){
            return new sadFortuneService();
        }
        method name is now the beanID.
        return type here is the Interface.
    
    injecting values from a properties file.
    create abc.properties
    in configuartion class above class put.
    @PropertySource("classpath:sprot.properties")
    @Value("${food.email}")
    private String email;
    you can now put anywhere in any class.
    




