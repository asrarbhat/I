v#zero to mastery
    js engine runs js in browser.
    1996 livewire was the backend for js.
    node is js runtime: environment that allows to run JS outside browser.
    js :1995 by netscape browser people.
    runtime is code executed to execute your code eg. compiler + libraries etc.
    node comes with its own api.
    to install just download it and add the bin folder to path.it has node file in it.
    node has LTS and current version.
    node : to open in repl mode.
    node -v or node --version
    event loop asks V8 to execute callbacks.
    v8 executes and then event loop executes for the rest of the code that is asynchronous.
    node is v8 engine + libuv 
    libuv is a C library used for asynchronous code,for other than what js can do,used for asynchronous IO.
    2019 Deno was introduced.
    2008 chrome came.
    v8 was fast hence we made node in 2009 by ryandahl.
    v8 and libuv communicate.
    runtime environment is everything that my program needs to run: os + libraries + engine + compiler etc.
    global/window is not part of JS.
    in vscode install visual studio intellicode for autocompletion.
    spidermonkey is used by firefox as an js engine.
    node gives us process api .ti si a global object for all available.
    ctrl+l in browser to clear.
    command line arguments: process.argv[0] is /usr/bin/node  and [1] is abc.js and so on.
    v8 is opensource,even Deno uses it.
    global.process<>process,global is same as window in browser.
    web2.0 was when websites became interactive.and user could provide data.
    process.argv is array of strings.
    + for concatenation of strings.
    `${a+b}` for template string. in python f'{}' . ` is called backtick.
    node globals:
        console.log,process,module,__filename,require(),__dirname,setTimeout() etc.
        anything in window or global are not js.they are features provided by node or browser.
    even versions of node has LTS,hence always download even version.
    node is basically a person writting a c++ program that combines V8 and libuv.
    globals are variables and functions build in.
    xml is like json,for sending data and it looks like html.
    v8 lets node run js.
    we have Node.js API's, like fs,http,path,when we call them they are handled by libuv.
    libuv works in all oses
    node.js bindings allow v8 to call low level api like fs,http written in c in lubuv.libuv deals with   input/output etc.
    even python uses libuv.
    web has client server architecture.
    process.exit() to exit.
    node is asynchronous.
    callback function: function that we give to be executed later time,when some event occurs.
    JSON.stringify({"food":"love"}), it is syncronous/blocking we get '{"food":"love"}'
    v8<>node.js bindings <>libuv 
    node.js bindings are written in c++ in src and lib contains js api provided.
    use nvm to install different versions of node at any point in time: nvm use 16,nvm install 12,nvm install 14.7.0  nvm ls-remote to list,nvm uninstall 14 etc.
    npm comes with node.
    LTS versions go via maintenance phase,but odd versions do not go through maintenance phase.
    ecmascript is a js standard ES6 is the latest big thing in 2016.
    global are objects that are available without any imports.
    cpp cc are two extentions for c plus plus code.
    js is synchronous porgramming language,we can use asynchronous code in it
    js does't support multithreading,because multi threading is hard.but node itself has multiple threads.Where main thread runs v8.
    js is asynchronous in certain environments like node. 
    libuv does I/O
    libuv has eventloop that executes our code asynchronously.
    we call asynchronous function in Node,it gets put on EventLoop which tells Os rn ti and notify when ready.
    libuv has thread pools,hence it is a multithreading usually 4 threads.
    not all operations are done by thread pool.
    some are directly done by kernel eg. network things.
    main thread runs V8 and event loop.
    node has 1 main thread and 4 libuv threads.
    event loo executes the callback functions ,hence code that is asynchronous,never come back to Js.only the changes it makes refect in main code.
    eventloop in libuv is a code that executes our asynchronous callback.
    when asynchronous operation expires eventloop executes callback.
    callback stays in queue called callback queue,event loop executes in FIFO queue.
    event queue<>callback queue.
    there are several queues for different types of operationsfor callback queues.
        timers,IO callbacks,setImmediate,close callbacks 

        setTimeout,setInterval,setImmediate ,as soon as possible to be done.
        event loop first checks times if any of them completed,then I/O callbacks,then setImmediate,then close callbacks like closing files.
        event loop while(true){},
        you can use Nginx,Apache with node
    eventloop is in libuv 
    netfix uses node.
    
    node modules:
        
    
    event driven:
        one emitter can have multiple observers .
        event driven programming.
        it is called observer pattern as in how to do event driven programming,eg for a button etc it could be one to many relation.
    
    js is event driven.
    process.on("exit",(code)=>{})executed when you exit. code is exit code.
    even process is an instance of event emitter.
    React uses event driven programming.
    you can have multiple listeners for same even p.on("hi",function1) p.on("hi",funciton2) and both will get executed when event occurs.

    node modules:
        we can't build everything from scratch, it is redundant, build on top of what other people have already build.
        we use require to get code from somewhere else.
        const http=require("http");
            it executes the module and returns module.exports
        const req = http.request("http://www.google.com",(res)=>{
            res.on('data',(chunk)=>console.log(chunk));
            res.on("end",()=>console.log("end"));
        })
        req.end(); //very important as it causes the request to b send.

        similarly https for https requests.
        
        const {request}=require("https");
        or use get function instead, then no need to end or assign.

        with event driven prgramming we use callback functions and closures.
        
        node uses commonJS modules.
        module.exports={send,recieve}; //variables,classes,functions etc 

        ES6 has its own module system.
            import * from "./index"
        even node.js supports them from 13.2
        import {send,recieve} from './request';
        import * as m1 from "./requests";
        no module.exports
            but export={your exports}
            you have to name module as mjs wehre m is module or put type="module" in package.json 
            otherwise treated as commonjs module. even in entry point file
            "./requests.mjs"
        in commonjs module system it looks for .js file first then .json file and then .node file.

        node caches modules when you load them,hence loaded only once.
            as it checks if was already loaded but you get different thigns from it when loading second time: won't print if console.log in it for second time.
            this cache is global 
            console.log(require.cache) // to see details.
                hence when you import same module in all modules,it is only loaded once.
        you can't edit modules in your file .
        if you try it creates that thing in that file only like overiding.

        if you put index.js in a folder,you can import that folder when you use require. it resolves index.js in that folder.
            eg index.js in folder with many files.js
                export whole thing from index.js in that folder.
                to avoid chaining while importing like m1.requests.send
            but don't use it package.json is better as you can mention entry point to a module in it.
            
        package is a collection of files/modules 
        each package should have a package.json 

        package.json in a folder makes it a package.
        in package.json in "scripts" in "start": "node abc.js"
            package.json is entry point to a package.
            npm run start or npm start, now to run that command.
        ES6 modules / esm or echmascript modules.

        over time ES6 would be adopted.

        axios:
            require("axios")
            axios works in both browser and node.

            supports promise baed API.
                axios.get("https://www.google.com").then((response)=>console.log(response);).catch((err)=>console.log(err)).then(()=>console.log("done)); //then after catch is always executed.
            exception in versioning ^0.80 only path versions 0.8.0 and <0.9.0
                ^1.2.0 can be less than 2.0.0
        
        package-lock.json contains exact versions and repository links etc.
        hence helps to install exact versions.

        put node_modules in .gitignore
        
        npm audit fix : in case to fix any security vulnerablities.
        npm audit : to see if any issue
        
    # for comments in a csv.
        the first line : header : name of columns 
        each row is a data entry.
    you can add any script to package.json 
    require supports package.json 
    to read csv:
        csv-parse best one.
        npm install csv-parse 
        const parse=require("csv-parse);
        parse is a funciton,it returns an event emitter.
        uses stream API of node 
        reading data line by line
        instead of all.
        hence better for performance as no need to wait for all in memory.
        parse() returns an event emitter.
        since it only deal with streams we create one first.
        const result=[]
        const fs=require("fs");
        fs.createReadStream("abc.csv").on("data",(data)=>result.push(data);).on("end",()=>console.log("done"));
        also use on("error",()=>whatever)
        it gives use binary results.

        use 
            fs.createReadStream(whatever).pip(parse()).on().on().on()
            you can do processing like filtering etc
            pipe adds a function to pipeline and parse returns a row.
                you read as stream line by line, and parse returns a row.
                like readable.pipe(writabe); //structure of pipe 
            in parse 
                parse({comment: "#",column: true}) each row as json.
            now we get an array of obejects that was cool.
        

#Mosh Hamedani:
    node is a runtime environment for javascript.
    node is used for creating backend.
    API: application programming interface.
    for high scalabe,data intensive and real time apps.
    it is superfast.compared to java etc even small code.
    used in paypal,netflix even better than spring.
    large opensource libraries
    it is a runtime environment,it is not a programming language.
    node is asynchronous/non blocking.eg waiter not waiting for completion,otherwise called syncronous/blocking.
    in node you have single thread.
    node has eventqueue,where it puts things.and thread doesn't wait for database when query.
    node is ideal for io intensive apps.
    it is not best for cpu intensive apps as there is single thread.like video encoding etc.
    node --version
    mkdir first-app
    create file app.js 
    node app.js to run it.
    window,document are not defined in node ,they only  work in browser runtime environment.
    code . to open the current folder in vscode.
    node is a c++ program.

    NODE MODULE SYSTEM:
        console.log("hi there"); global object,and can be accessed anywhere in any file.
        other global objects are like clearTimeout(),setInterval(),clearInterval(). setInterval is to call repeatedly.
        window object represents global variables and functions in browser.
        global.console.log();
        in browser var variables are added to window,but in node things are scoped to module.not even functions.even if var is used,it is limited to that that module only.it is a nice choice by node.
        as in global scopoe there is an overriding for objects of same name. which happens in browser.
        every file is a module.
        variables,functions are confined to that module.
        console.log(module);,module is an object and it is not a global object.it is in every module in a wrapper function.
        creating a module:
            file: logger.js
                module.exports.log=log;
                module .exports is an object that is exported.
            to load a module:
                var logger= require("./logger.js") or skip .js 
                noe logger is an object,you can use const also.
            logger.log("hi");
        intellisense shows methods etc.
        jshint a.js in terminal to check for errors,as it gives better error messages.
        if just one to export: module.exports=obj; now logger is a function not an object.
        node wraps code in a function called module wrapper function to have module level variables like require etc to not have them global.
            (function (exports,require,module,__filename,__dirname){
                require is not global object,it is local to each module.
                exports is a reference to module.exports, you cannot assign to exports but use exports.property to do things.
                at the end module.exports is exported.
                __filename,__dirname are complete paths.
            }) it is an IIFE
        
        Built in modules in node :
            os,fs,http,Path,Process etc.
        const path=require("path");
        var pathobj=path.parse(__filename); this object has useful properties related to this file.
        
        os module:
            const os=require("os");
            var t=os.totalmem();
            var m=os.freemem();
        
        file system module:
            const fs=require("fs");
            const files=fs.readdirSync("./"); this is blocking,it reads all files are in folder,returns an array.
            fs.readdir('./',function(err,files)=>{
                if(err){}
                else{
                    files array.
                }
            }); err if error is there and files if successful.and this is asynchronous.
        
        event module:
            event is a signal indicating something happened eg http listener.
            const EventEmitter=require('events');
                EventEmitter is a clas.
            const emitter = new EventEmitter();
            emitter.emit('messageLogged') this string is event name.
            it is called raising an event.
            emitter.on('messageLogged',function(){});
            it is a listener. on is as good as addListener.
            order is important,listener should be first.
            we can have arguments to emit
                .emit("hit",{id:1,url:""}) this is called event argument.
                .on ("hit",function(arg){});
                hence we can pass data about event.
                we can use arrow functions.
            emit should be of same object,won't listen for other obejects even if used across modules.
            you can create a class and extend EventEmitter class.
                this.emit() or obj.emit() in it.
                obj1.on() or this.on() better way.
            
        http module:
            const http=require('http');
            const server: http.createServer(); create a web server it is an event emittr object.
            server.listen(3000); here 3000 is a port.
            server.on("connection",(socket)=>{console.log("hi")}); connection is prebuild event.
            in browser localhost:3000
            we can use require anywhere in code.
            const server=http.createServer((req,res)=>{
                if (req.url==="/){
                    res.write("hit");
                    res.end();
                }
                if another end point.
            })
            we can have many if blocks for various routes.
            but it gets complex so we use express framework,build on top of http module.

    NODE PACKAGE MANAGER(NPM):
        it is a command line tool.
        registry for modules.for pretty much every problem that you want to solve.
        npmjs.com
        npm -v 
        comes with node,automatically.
        node and npm are independent.
        npm i -g npm@5.5.1 
            install and g is for global not specific to that application,it might need for you to run as administrator.
        package.json contains the information about your application dependencies.
        npm init --yes or just npm init to create it.
        npm install/i underscore ,it is added to package.json as dependency.
        stores package the node_modules
        every node module has package.json in ti even ones you download.

        to use a module:
            first assumes core modules 
            then file or folder in current directory,that might have index.js in it 
            node modules,look there now.
        
        underscore contains lots of utility functions.
        var a=_.contains([11,2,3],2);

        mongoose is a node package to deal with mongodb.

        use JSON.strinify to send json from server as string.and JSON.parse to get object back.
        
        installing a module installs its dependencies as well,all in node_modules to avoid repetition.
        if different versions then it will create node_modules folder within it.
        
        node_modules could grow to be a few hundred megabytes,but all dependencies are stored in package.json hence we can easily restore
        to restore dependencies: npm install or npm i.
        hence don't add node_modules to your source code in git you can use .gitignore file and add node_modules/ to it.
        package-lock.json is for npm to do its job and it contains precise versions.

        semantic versioning:
            Major.Minor.Patch 
            Patch is for bug fixes 
            4.13.6 fix bug we get 4.13.7
            minor adding new features without breaking api.
            4.13.7 to 4.14.0
            if potenitally break existing application then 4.13.6 to 5.0.0
            ^4.13.6 means as long as major is 4 or 4.x 
            ~1.8.3 means both major and minor have to be same. 1.8.x 
            1.8.3 for exact version. you can edit ~ ^ in package.json accordingly.
        
        listing installed packages
            npm list, it shows with versions and their dependencies
            npm list --depth=0,to just see them and not their dependencies.
            npm view mongoose,package.json of that file.
            npm view mongoose dependencies to see dependencies
            npm view mongoose versions,to see all versions.
        installing specific version:
            npm i mongoose@1.2.2 it overrides earlier version.
        
        updating local packages
            npm outdated, to see whihc ones are outdated with respect to what is valid for then and current,latest,wanted available.
        npm update,only of minor,patch releases updated to latest monor,patch.

        npm i -g npm-check-updates
        npm-check-updates or ncu 
        ncu -u updates even major releases,but it only changes package.json 
        to update: npm i 

        dependencies can be development dependencies or production dependencies.
        development dependencies should not go to production.

        npm i jshint --save-dev    , added to dev dependencies in package.json,also in node_modules though.

        uninstalling:  npm uninstall/un mongoose 
        packages are particular to that project.

        global packages : common to all -g to do so.
        npm i -g mongoose.
        npm -g outdated
        npm un -g mongoose 
        index.js is entry point to our packages.you can have a folder with package.json and an index.js as an entry point.or in package.json you can mention the entry point.

        you can publish your own package as well.

    EXPRESS:
        end points: links.
        express: fast and lightweight framework for building web apps. It is built on top of http module.

        RESTFUL SERVICES/API's 
            in client server architecture
            to talk to server 
            server exposes services that are exposed to client via an http server.

            client <> server 

            REST: representational state transfer: convention for building these http services.

            endpoint eg :
                http://vidly.com/api/customers
                https://domain/api/collection
                    api is not compulsory but most companies use it or use subdomain like http://api.vidly.com . 
                    collection of customers,in rest world we call it resource.
            we do CRUD using REST api's 
            http methods: verb to describe action.
            GET to get data, POST to create ,PUT to update, DELETE to delete.

            request:
                GET /api/customers //plural name for resource 
                    returns [{},{}]
                GET /api/customers/1 //here one is id, it returns {}
                    to get single data point.
                
                to update:
                    PUT /api/customers/1
                        {} in body 
                to delete
                    DELETE /api/customers/1 //no need for body 
                to create:
                    POST /api/customers/
                    {} since adding hence there is no id.
                
                these were conventions for rest api.
            
        introduction to express: framwork.
            most popular for node.js
            mkdir express-demo 
            npm init --yes 
            npm i express 

            first web server:
                create index.js or anything 
                const express = require("express"); // returns a function.
                const app=express(); //returns an object type Express 
                    //it represents our app.
                methods:
                    app.get(),.post(),.put(),.delete()
                
                app.get("/",(req,res)=>{
                    res.send("helloworld");
                }) //they take a callback function as an argument. and / represents root of website.
                //as a whole it is called route handler.

                app.listen(3000,()=>console.log("listening on port 3000));
                //hence the function is optional as arugment.

                url in browser sends a get request.
                app.get("/api/courses",(req,res)=>{
                    res.send([1,2,3,4]);
                });
                //the url is called the route and the callback function is called route handler.

                we can put related routes in a module, hence better like related ones.
                
                npm install -g nodemon //node monitor
                nodemon index.js 
                    now changes reflect.
                const port=process.env.PORT || 3000 
                    to get environment variable PORT 
                    proces is a global object.
                app.listen(port,()=>console.log(port));
                in terminal export PORT=5000

            route parameters:
                "/api/courses/:id" in route handler use req.params.id 
                can have multiple params like /api/courses/:year/:month //these are essential parameters.
                req.params is an object.
            
            query string parameters: optional 
            /api/posts/2018/1?sortBy=name 
                from ? it is query string, which is optional.
                route remains same.
                to use it req.query object {sortBy: "name"}
                parseInt in node to parse an integer from a string.
            
        handling http get:
            if invalid we send 404 
                res.status(404).send("not found")
        post requests:
            on top use 
                app.use(express.json()) 
                    //it is a middleware, it is important to use req.body 
                    //it parses json object.
            call endpoint using postman chrome extention.
                in body,raw,json {"name": "hi there"}
            req.body now json as we used middleware.
            we don't use middleware for query or parameters,only for body.
        
        input validation:
            always validate inputs.
            eg check length 
                res.send(400).send("name<3");
                400 mean bad request.
            or use joi for validation
                npm i joi 
                const Joi = require("joi"); //returns a class, thats why J capitcal.
                in route handler:
                    const schema={
                        name:Joi.string().min(3).required()
                    };
                    const result=Joi.validate(req.body,schema);
                        result is an object with two properties error and body.
                        if (result.error)//would be null if we get data.
                        one of them is null.
                        result.error.details[0].message 
        handling put:
            can put validation function in a separate function and call it.
        handling delete:
            use object destructuring.
            res.send() doesn't terminate that function there so be careful if code below shouldn't be executed if error.

    Advanced Express:
        Middleware:
            a function that takes request and gives response to user or passes control to another middleware.
            eg route handling function in app.get et is a middleware that responds to user.
            eg app.use(express.json());
                responds with a middleware function that parses body of request to json object if there.and sets req.body.
            request processing pipeline:
                request->json()->route handler-> response 
            middlewares make express funcitonal programming.
            express app is just a bunch of middlewares.
        
        Building a custom middleware:
            app.use(function(req.res.next){
                console.log("logging");
                next();//next middleware.
            }) //installing middleware
        
        can create one for authentication or for logging.

        you add middleware to front in sequence they are defined.
        app.use(f1);
        you can put then in module and then use them.

        built in middleware:
            eg express.json() looks for json object.
            for url encoded payload:
            extended option allows it to parse even lists inside.
            app.use(express.urlencoded({extended:true}));for also body to parse,when html forms used for get request or post request . extended is true as otherwise body-parser depricated.
                like  key=value&value=val etc post or get from form is this way in body and we need to parse it. gets json and puts in req.body. in postman use form encoded to send that kind of requests.
            app.use(express.static("public")); 
                public folder is where to look for static files. eg /com/readme.txt 
                no need to use public in url.
            express.json() checks if there is a json body and it parses such into a json object.
        third party middlewares:
            helmet,morgan etc 
            helmet for security,use at top,looks at headers. npm i helmet.
            morgan for logging ,npm i morgan app.use(morgan("tiny"));
            middleware decreases performance.
            GET in form in html are not added to body.
            browser forms are url encoded so you need urlencoded middleware.but maybe react forms are json.
            if next not used,request hangs in there.

        environment variables:
            development
            production
            we want to enable or disable based on environment 
            you can use environment variables to decide environment.

            app.get("env") //returns development by default 
            if(app.get("env")==='development'){
                app.use(morgan("tiny"))
                            }
            set development environment
                export NODE_ENV=production
                if not set returns undefined with process.env.NODE_ENV 
        
        configuration:
            storing configuration settings
                rc package
                but config package is even better.
            npm i config 
            create folder create 
            create default.json in it 
                {
                    "name": "my express app",
                }
            create development.json, it overrides default if same,else adds.

            create production.json
            {}

            in index.js
                const config=require("config"); it is the module and not the folder created.
                console.log(config.get('name')) //mail.host etc 
            
            export NODE_ENV=development 
                now uses development.json  
            don't put password in there.
            for passwords export app_password=1234  //set manually 
            in config:
                add 
                custom-environment-variables.json 
                in this file 
                {
                    "password":"app_password" //to get env variables app_password 
                }//this maps config settings to environment variables.
            
        debugging:
            npm i debug 
            const a = require("debug") //returns a function 
            a("ap:startup") b("app:db) to have for different kind.
            use a("hi there")
            or b("data base error")
            in terminal export DEBUG=app:startup or whatever you want.
            now it runs on that namespace only.
            DEBUG=app:* for all 
            or use app:startup,app:debug
            or set to nothing to get nothing 
            we get debugging messages like for morgan on console.
            it color codes the different kinds which is great.
        templating engines to return html dynamically generated.
        to send html file res.sendFile("./abc.html");

        database integration:
            mongoose is build on top of mongodb.
        express doesn't have authemtication.

        structuring express application:
            put api's routes in separate file.
            eg route folder courses.js 
            load express in them 
                after that 
                cosnt router=express.Router();
                replace app with router everywhere using f2 
                and module.exports=router;
            create folder for middlewares also 
            in index.js c=require("./routes/courses")
            app.use("/api/courses",c);
                 if starts with /api/courses/ then go here.
            
            have to laod express in every module.
            even in index 
            in courses.js / means api/courses
        
    syncronous and asynchronous code:
        we use db for data it is asynchronous operation.
        code . to open in vscode 
        syncronous programming/blocking  -> second line has to wait till first line finishes
        console.log is blocking 
        asynchronous programming:
            setTimeout(()=>{},2000)
                executed after two seconds 
            it doesn't wait for it,commands below are executed in the meantime.
            because setTimeout is an asynchronous or Non blocking function. it schedules the task,it doesn't wait it doesn't block.
        asynchronous doesn't mean multithreading,it is a single threaded,like waiter.

        callback:
            dealing with async code: sincw we want data from asynchronous operation.
            you can pass a function to asynchronous function to execute once aysnc work done.
            but it results in callback hell. we can pass named funcitons to make it better.
            returning a value from callback is a meaningless thing.

        promises:
            an object that holds eventual result of an aysnc operation,to deal with aysnc code.
            promise is an object that holds the eventual result fo an asynchronous operation.
            intially in pending state,it can be rejected or fulfilled,if aysc done properly.
            const p=new Promise(function(resolve,reject){
                resolve(value);
                reject(new Error("message"))
            })
            can user an arrow function instead.
            resolve would send to consumer of this promise 
            use resolve within the async function.
            p.then(result=>console.log(result))
            p.catch(err=>console.log(err.message));//if rejected.

            you can return a promise from a function and then then it.

            p.then().then().catch() //catch called if error anywhere before it.
            if last one returns promise then we chain thens 
            p=Promise.resolve({id:3}) or reject({}) to do instantly 
            Promise.all([p1,p2,p3]).then()
                //returns a promise that is resolved once all complete 
                result is array of all results 
                .rac([p1,p2]) if any completes 
            
        Async await:
            helps to write asynchronous code like syncronous code 

            const user=await getUser(1); //returns a promise
            console.log("done")

            put all of then in aysnc function name(){

            }
            async await are build on top of promises 

        catch error using try,catch within async function as there is no .catch for promises within 

 

        while using router put more specific at top.
