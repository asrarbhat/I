edureka:
    it is an opensource tool, used to automate testing on web browsers.
    developed in 2004.

    you can test across different browsers.
    you can integrate these tests into junit or TestNG, maven, jenkins etc 
    it supports C, C++, python, java etc 
    it is easy to use.

    features:
        cloud based testing platform.
        parallel testing execution.
        it is an automated testing tool.
        test scripts directly interact with the browser.
    
    components of selenium:
        selenium webdriver, selenium Grid, selenium IDE, selenium RC( remote control)
        selenium IDE is a record run tool, it comes as add on for firefox.
        selenium RC was first tool of selenium, earlier it was called javascript executor.
        selenium webdriver is cross platform webdriver, it provides api to use browser, it is an upgrade to RC. RC needs RC server.
        selenium Grid to run test cases on remote machines, or in mulitple machines.
    
    locator: eg id, class etc for html elements on the page.

    installing selenium:
        install java, eclipse
        install selenium: go to selenium.org download it, download java client.
        download chrome driver.
        create new project in eclipse.
        add all those to dependcies.
    
    WebElement in Selenium:
        elements are building blocks of web pages.
        anything present on web page is a web element: eg button, link etc.
        it can have attributes and text.
        selenium WebElements correspond to them.
        eg Link, Button, Image, Edit Box, Text Area, List Box, Drop down box, Check box etc.

        operations on browser:
            launch the browser, navigate to particular web page, close focused browser Driver.close(), close all Brosers that are opened Driver.quit().
        operations on web page:
            click, write, check, edit, sumbit, redirect etc. if checked box is enabled or not, select, verify etc 

        selenium uses element locator to locate elements:
            locators are properties of elements on html.
            it is tricky to identify these elements.
            eg ID, Name, Class, LinkText,CSS selector, Partial link text, Xpath for using xml.
            you add external jars to build path first.
        
            first thing you do is set the web driver for your browser:
                System.setProperty("webdriver.chrome.driver", "C://User\....\chromedriver.exe");
            now create an object of your driver:
                WebDriver driver= newChromeDriver();
                driver.get("https://www.amazon.in");
                driver.findElement(By.id("id1")).sendKeys("Poco F1");
                    send sendKeys is to enter text to a text box.
                Thread.sleep(4000) //to sleep for 4 seconds.
                driver.findElement(By.className("class1")).click();
                    to click on search button.
                you can click on checkbox as well.
                By.linkText("ACM") if that is how you want to locate it.

                driver.manage().window().maximize() //to maximize the window.
                driver.navigate().to("http://www.fb.com/blogs"); to redirect to another page.
                driver.navigate().back() to go back.
                driver.quit() to exit driver execution.
            

there is manual testing and automatic testing.
selenium WebDriver = selenium RC + WebDriver + improvement.
to get title of page: driver.getTitle() it is a String, you can use this to check if test was successful or not, and assert based on this.
you only use Thread.sleep() while you are writting code when you run these test cases, you remove sleep.
selenium IDE is used to record and playback the scripts in firefox.
selenium talks to browser driver using http with Json, and browser driver talks to browsers using http and http server.//maybe in RC only in new versions it works in different and better way.


locators in selenium:
    locator is a unique way to locate an element on a web page.
    the more effective the locator, the more stable the script.
    id is the best one, in a page, id is unique.
    driver.manage().deleteAllCookies(); to delete all cookies before hand.
    maximize screen and delete cookies before hand.
    driver.manag().timeouts().pageLoadTimeout(40,TimeUnit.Second);
                             .implicitlyWait(30,Timeout.SECONDS);
    
    after id, you can give second preference to name locator.
        names do not have to be unique.
        it returns first that matches or raises exception if none there.
            By.name()
    we can select by link text:
        this only works for hyperlinks.
        link text is the text that is between anchor tags
            By.linkText("Trouble signing in").click() 
        
    CSS locators:
        this is the best way to locate complex elements.
        this always starts with #
        to check if css selector is selecting the right elemnt in inspect, click on elements and then ctrl-f and then search using that CSS selector.
        By.cssSelector("#login")
    
    partial link text:
        By.partialLinkText("Unable") //just the begining of link text.
    
    Xpath:
        also called Xml path.
        absolute starts from root fo document
        relative from anywehre.
        // anywhere in document 
        //input[@id='login-username'] here you are looking for input element with id attribut that value.
        you can verify at inspect same way.
        By.xpath("//input[@id='login'])

    preference:
        id >> css selectors and xpath >>link text
    
    best practises:
        simple and small, should be very hard to break.
    

CSS Selectors in Selenium:
    it is faster than xPath.
    eg h1#id, h1.class, h1[locator*="3"]
    to execute js scripts, we use javascript executor.
    JavascriptExecutor js= (JavascriptExecutor) driver;
    js.executeScript("window.scrollBy(0,300)");
    chropath extention for browsers would automatically find locators for you.

Xpath:
    Xpath is a language to query.
    //img[contains(@src,"sprites")]
            starts-with(@id,"message")
            //*[contains(text(),"order")] //* means any element.

        first | second //for or 

Waits in selenium:
    helps to troubleshoot issues while redirecting to different pages.
    since it takes time to load elements. And you don't want your program to run before elements are loaded.
    there is implicit wait and explicit wait.
    implicit wait:
        wait for some time before throwing no such element exception.
        driver.manage().timeouts().implicitlyWait(Timeout,TimeUnit.SECONDS) for all elements.
        it will wait till then before throwing exception that if it finds that element.
        it will not wait for that long seconds if element is already loaded. called dynamic waits.
                                  .pageLoadTimeout(40,Timeout.SECONDS) //put this at top then implicitlyWait,default implicitlyWait is 0.
    
    explicit wait:
        Thread.sleep(3)
        you also wait based on conditions.
        new WEbDriverWait(driver,timeout).until(ExpectedCondition.visibilityOf(element));
        element.sendKeys(value);
        this is specific to each element and it is not for all elements.
        there are tens of such functions like elementToBeClickable etc 
    create a method of each action in a page with all care taken, like timeout etc.
    implicit is global and not preferable.
    it would first wait for implicit wait and then for explicit wait.
    use explicit wait, it is better.
    calling implicitlyWait funciton again would override the value nothing more.

Handling Alerts in Selenium:
    alert: small message box, used for input or message or error, they are popup boxes.
    types:
        simple alert: displays warning or information and there is a button to close the alert.
        prompt alter: asks for some input from the user, and you can send using sendKeys, you can ok or canel.
        confirmation alter: asks for permission ok or cancel.

    handling alerts:
        driver is always on browser and doesn't know about alerts.
        Driver.SwitchTo()
        Alert.dismiss()
        Alert.accept()
        Alter.getText() //to see the message 
        Alert.sendKeys()

    when you use Thread.sleep you have to use throws InterrupedException.
    you can't click on anything until popup box is cleared.
    Alert alter=driver.switchTo().alert();
    alter.getText();
    alert.accept();
    even you can close popup windows this way.
    you can now use driver like before there is no switch back to be done as you didn't change driver you just created alert.

    Handling popup windows:
        Robot robot = new Robot();
        robot is used to hover mouse and release and hold etc.
        robot.mouseMove(400,5) //these are x,y coordinates.
        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
        robot.mouseRelease(InputEvent.BUTTON1.BUTTON1_DOWN_MASK)
    
    Exceptions:
        WebDriverException
        NoSuchElementException
        NoSuchFrameException
        NoAlertFoundException
        TimeOutException

Listners in selenium:
    they listen for events.
    used to create logs and reports.
    types:
        web driver listeners and TestNg listeners.
        you can track different kinds of events, like navigating etc.
        for this you implement an interface , and instead of driver you use EventFiringWebDriver.
    you would need TestNG libraries.
    TestNg listeners like onStart, onTestSkipped, onTestFailure etc.
    

    

selenium is to testing suite for web based applications.

driver sits between our program and browser.

same origin policy was issue initially when selenium was designed. So they came with a server in selenium RC to trick browser. 

Selenium  web driver removed server and directly interacted with browser from OS level.

selenium IDE is like you do it first andnit gets recorded and you can play same again. you can convert recorded script into java, but it is not recommended.

you don't need server in webdriver. it works at OS level.

download selenium webdriver jars, add all these jars to your buildpath, and do the same for drivers.


                