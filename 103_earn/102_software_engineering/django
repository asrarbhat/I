[1,23]
    most popular framework for python.
    django is a python web development framework.

    a framework is a third party module/library that solves most of the problems
    for you.
    And you focus on core business logic,without rediscovering the wheel.

    framework>library(just some functions)
    built for python 3.x
    batteries included: solution for most of the problems included.
    but we can still customize and is extensible.
    
    can use for any size application.

    setup and creating projects
    ---------------------------
    install python3
    install django module-> this one is to create django project.
    pip3 install django

    django-admin startproject myproject


    development setup
    -----------------
        use vscode for development
        install helpfull extentions
            python,pylance(for auto completion)
            autopep8 for formatting.
            make sure you select python version at bottom in vscode as there could be many.
        

        we get manage.py and a folder by same name as our project.from now on we use
        manage.py to do stuff.

        that folder has:
            __init__.py to make that folder a python library.
            settings.py has global settings for the project.
            url.py to register different routes.
            asgi.py,wsgi.py are deployment related/server related.
        to launch a local development server:
            python3 manage.py runserver
            at port 8000
            ctrl+c to exit.
        
        django project consists of modules called apps.

            python3 manage.py startapp challenges
            you can create multiple apps in a project.

        apps are used to represent different features,they are like modules.
        apps are to django what components is to react.

        urls<> routes<>uniform address locator.

        project level files are just configuration files.
        we do real stuff in apps.

        views:
            actions/logic for different urls.
            in django: a function which is executed,or a class.
            it has code that handles requests and returns the responses.it 
            can also return HTML etc.

            view<> a function or a class,views process requests.
        in apps folder you get:
             you get migrations foler,it is an empty folder.
             and files like admin.py,apps.py,models.py,tests.py,views.py

        in views.py
        
            from django.shortcuts import render
            from django.http import HttpResponse //its a class
            def index(request):
                return HttpResponse("this works")
        
        urls are to web what path is to my terminal,some point files,some to folders 
        some to pages.

        add urls.py file in that app for url configuration.
            and in it 
                from django.urls import path
                from . import views 
                urlpatterns=[
                    path("january",views.index)
                ]
            in urls.py at project level
                ------- import path,include
                in urlpattern
                path("challenges/",include("challenges.urls")) it says to forward there.

            in urls.py at app level:
                path("<month>",views.monthly_challenge) monthly_challenge is the name of the function.
                month is a placeholder.
                in view, 
                    def monthly_challenge(request,month):
                        month is a keyword arguments,it will be a string.
                        name of argument has to be same as the placeholder.

            from django.http import HttpResponseNotFound
                return HttpResponseNotFound("this didn't workd")

            client sends request to server and server looks at global urlsConf and selects
            view and returns the response.

    path("<int:month>",views.bynumber)
    path("<str:month>",views.byname)
    these would check and convert.and order of these paths matter,
    put less expressive at top.
    it checks if it can be converted to that type.

    from python 3.6 dict keys are ordered/order preserved.


    from django.http import HttpResponseRedirect
    return HttpResponseRedirect("/challenges/"+month)
        after .com/ it does.
        for redirection.
        url changes in browser automatically.
        302 redirect.
        browser automatically sends another request to redirected url.
    dynamic code can be modifed easily,as otherwise you have to hardcode every scenario.

    never hard code values.
        put all hardcoded values in one config file.
        and then you can change things from one config file.
        from one place.

        eg HttpResponseRedirect()"/challenges"/+"something")
            challenges is hardcoded so make it dynamic
            as what if app name changes etc.
        path("<str:month>",views.monthly,name="abc")
            name here is name to this url,until this file. we just gave name to url.
            name is keyword argument,you can't name it anything else.
        in your view.
            from django.urls import reverse
            redirct_path=reverse("abc",args=[redirect_month])//redirect month is the string we want to redirect to 
                to recreate url from names.
                in abc abc would give challenges and args has january
            return HttpResponseRedirect(redirct_path)
            hence more dynamic
            named urls are cool,and amazing never make modules dependent on
            what is at previous level.
            or even other parts of same app.

        

 