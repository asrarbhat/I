own:
    

pluralsight:
    java has multiple build tools like ant, maven etc.
    gradle is better than both.
    gradle is a convention based build tool for java.
    maven uses xml and gradle uses DSL: domain specific langauge.
    it supports multiple project build.
    builds many langauges.
    supports dependency management.
    xml is hard to maintain so we don't use it in gradle.
    dsl is its biggest strenth.
    
    installing gradle:  
        download from website.
        gradle.org
        download the zip file.
        in bin you add it to path.
        now run gradle and it works.

    you create a build script with DSL, and there are two types of DSL one from kotlin and one from Groovy.
    Groovy one is order and used mostly.
    This build script defines the tasks, like build clean etc.
    one we have it we can run it from ide or command line.

    eg  build.gradle for groovy type.
        task 'hello'{//name of a task
            doLast{ //this is groovy code inside this.
                println "Hello Gradle"
            }
        }

        tasks have life cycle and doLast and doFirst are those kind of methods that are called in the begining and end.

     eg   build.gradle.kts for kotlin type.
           tasks.register("hello"){
               doLast{
                   println("hello gradle")  //this is kotlin code
               }
           }

        gradle hello //it runs the whole thing.
    
    gradle is build on tasks and it runs those tasks for us.
        eg
            apply plugin: 'java' //at top, plugins are way of extending gradle and adding more tasks.
    
        gradle tasks  shows you all available tasks available through the build file.
        by default it looks for code in src/main/java
        gradle build //to build.
        it creates a build folder with compiled code.
        and libs folder in build with the jar file.
        and it creates a .gradle folder for internal work of gradle.
    gradle -i build //prints more info like for each task.
        you even see up to date if no need to compile again.
    another way of doing it:
        plugins{
            id: 'java'
        }
    to run you still use the same command prompt.
    assemble task creates jar

    gradle wrapper:
        it is one of the tasks.
        gradle wrapper 
        it creates a gradle directory in your project.
        you get gradlew for linux and gradle.bat for windows
        now you can use those scripts to use gradle.
    

    gradle consists of projects and tasks.
    build may have one or more projects.
    project has one or more tasks.
    plugins extend project

    what is a project:
        project has a build file.
        it could be build.gradle or build.gradle.kts 
        optionally you might have a settings file as well, for version number etc.
    
    what is a build file:
        build file defines the tasks.
        either predefined or directly 
        or indirectly by adding a plugin eg by using java plugin.
    
    to see build in task.
        create an empty build file, in terminal run gradle tasks // you get to see all built in tasks
    
    build phases:
        intialization, configuration, execution 
        in execution phase tasks doFirst and doLast are there 
        you can even put conditional tasks.
        tasks are part of execution phase.
    
    build.gradle 
        task hello{
            doFirst{
                print "hello"
            }
            doLast{
                println "hi"
            }
        }
    
    build.gradle.kts
        tasks.register("hello"){
            doFirst{
                print("hello")
            }
            doLast{
                print("hello")
            }
        }

    to execute: gradle hello to run that task only.

    task dependencies:
        eg jar task depends on class tasks 
        you run independent tasks first.

        you can create multiple tasks in a file.
        task.register(...){
            dependsOn("hello") //here hello is the name of the task that it depends on.
        }

        for grooy type 
            dependsOn hello 
        noe even if you run second task, ones that it depends on are run first anyway.

    other way of adding tasks is by using plugins:
        in groovy syntax:
            plugins {
                id 'java'
                id 'org.flywaydb.flyway' version '6.3.2' //for community plugins.
            }
        in kts 
            plugins {java}

        java is a well known plugin.
        if you do gradle tasks, gradle would first download all plugins.
        from now on only following groovy style.

    building java and kotlin projects:
        create a build by creating a build file.
        add the appropiate plugins 
        override tasks and properties

        java plugins:
            java
            java-library //when building libraries instead of applications
            application //gives us ability to run applacation.

            java plugins expect to find source code in standard locations.
                standard: 
                    src/main/java/
                    src/main/kotlin/
                    src/main/resources/
                    src/main/test/
                    src/main/resources/
                same as that in maven.
            if you want to change:
                sourceSets{
                    main{
                        java{
                            srcDir 'src/java'
                        }
                        resources{
                        srcDir 'src/resources'
                        }
                    }
                    test{
                        do same here.
                    }
                }
    
        build.gradle
            plugins{
                id 'java'
            }
            gradle build //to run 
            the jar file is named same as the name of whole project folder.
        
        gradle clean to delete everything
            gradle clean build //to first clean and then build.
            gradle build -i //to see tasks being run i is for information level logging.

            version = '1.0-SNAPSHOT' //in our build.
            now when you build the jar file name would be project-1.0-SNAPSHOT.jar 

        dependencies{
            implementation files ('somewhere/abc.jar', 'somewhere/def.jar')
        }

        if you change plugin from java to application, then the it do same as java but it would also find a Main method and run it. it has extra task of run.
            but to do so you have to specify main class.
            mainClassName = 'com.pluralsight.Main
            now you do   : gradle run 


        java plugin is highly configurable.
            java{ //even same in applcation plugin when used.
                sourceCompatibility = javaVersoin.Version_1_8
                targetCompatibility = javaVersoin.Version_1_8
            }
            now if you use langauge features above java 8, it would show error.

            gradle javadoc it creates docs folder in build.

    dependencies:
        dependencies are cached.
        you can have test dependencies or deployment dependencies.
        your project may depend on other projects, or external libraries or internal libraries.
        internal are ones you create.
        other projects are from multiple projects that you have.
        transitive dependencies are also taken care of.
        gradle -q dependencies // to see all dependencies we use.
        gradle -q dependencies --configuration compileClasspath //to only that compilers dependencies and not for test etc.

        repository:
            location where jar files are stored, it could be remote or local or in file system.
        rather than hardcoding dependencies in build, you just hardcode a repository

        repository{
            flatDir{
                dirs "lib"
            }
        }
        now in
            dependencies{
                implementation 'log4j:log4j:1.2.8'
           ' or  implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3'

            }

    configuration scopes:
        dependencies live in scopes.
        implementation scope covers compileOnly and runtimeOnly
        testImplementation for both testCompileOnly and testRuntimeOnly
        testImplementation also uses implementation ones.
        implementation files ("filelocation.jar") to add dependency from any file.
        in gradle.properies, you can add variables with values and you can import these values in build files. usually the version are put here.
        gradle test to test the code.
        in groovy you don't use gradle.properties you use
            buildscript{
                ext{
                    log4j_version = '1.3'
                }

            }

            you can use these varialbes now as $log4j_version anywhere.

        using remote repositories:
            repositoriies{
                mavenLocal() //not recommaded.
                mavenCentral()
            }
            repositories{
                url "http:.....lkfdhfdhf"
            }

        gradle caches are in .gradle folder in home for all projects.
        gradle wrapper gives you  specific version of gradle for project which is nice.
        gradle wrapper adds gradle wrapper.
        now when you use gradle it will always use gradle wrapper to run.
        build server is a server used to create build for server so it runs everywhere.
    
    testing:
        by default source set is src/test/java 
        and you can change that.
        output to build/classes/test 
        reports to build/reports/test
        build would also run the tests.
        test{
            testLogging{ 

                events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED
            }
        }
        now it logs the status on console.
        test logger plugin is better.


from thinking:
    gradle uses two folders, one in project and one in users home directory.
    one in users home directory has global configuration file as well.
    local overrides global.
    


from mobile:
    gradle build would compile and run test cases
./gradlew build
gradle folder in your project contains code and configurations for your gradle wrapper
settings.gradle additional configurations for your project like project name.
.gradle folder in your project is cache.
gradle init to initialze project.
always use gradlew to run gradle.
it also creates .gitignore file

implementation dependencies are for complilation adn running

testImplementation ones are for test build and test run.

group means url of repo, then name, then version.

there are tasks like compile, jar, test etc that you can run individually.

classpath is created after compilation for your dependencies.

java plugin initialzes project as java project.
you can now run the jar file you created
java -jar abc.jar
in build.gradle you include under jar the manifest where you tell it where the main class is.

when you add tests you get an index.htlml file under tests in build that gives neat idea of reports.


        



