Mosh hamedani:
    
    big O to describe performance of an algorithm. 1,n,n+m,n squared,logn 2 to the n. and theta for avearage and sigma to lower bound.same notations for space complexity.

    can use hash table to break nested loop.
    similary two points during iteration can help.
    scope means what is avaible to me and context means where am i at.

    1D arrays:
        list of homogenous items sequentially in memory and access is O(1)
        but they are static.it is a con.
        to copy needs O(n)
        lookup is O(1)
        insert is 0(n)
        delete is O(1)
        these are worst cases.

        in java int[] arr=new int[5];

        every data structure can be implemented using a class.
        
    linked list:
        it head head and tail pointers.
        head-value-address-----value-adddress---------value-address-tail.
        
        insert at the end o(1) at the begining o(1) at random location O(n)
        for delete begining o(1) for end or random O(n)

    static arrays have fixed size,dynamic arrays grow by 50% to 100%.
    use static arrays if you know no.of elements.

    in doubly linked list there is pointer to next and previous element. delete from end would be O(1)

    we can also have circular linked list where it could by singly linked list but tail points to head.

    attention deficit disorder(ADD) : your code is efficient but things are disconnected and are not written in logical manner.

    stack:
        can be used to do undo or reverse things.
        LIFO,li fo
        push(item) pop() peek() isEmpty() all O(1)
        () matching can also be verified using stack.
    always check edge cases.

        stack can be implemented using singly linked list where added to head and also removed from head,for queue it is adding to tail and removing from head.
    stackoverflow exception: stackfull.

    queues:
        can be used for scheduling.
        it has back and front.
        FIFO five fo.
        enter from back and leave from front.
        can be used for resource sharing in os,web servers etc 

        operations:
            enqueue,dequeue,peek,isempty,isfull  all O(1)
            can be implemented using linked list,same for stack.
        we can reverse queue using a stack.

        we can have circular queues or arrays,to optimize the remove if we are using arrays in implementation.
        
        front and rear using modular arithmetic instead of if else.

        two stacks are as good as arrays.

        priority queues:
            queue items based on priority. sorted arrays can be used to do so,and insert by shifting,or better use heaps eg max heap to do so.
    
    dictionaries/hash tables:
        gives super fast lookups.
        used to store key,value pairs.
        key goes via a hash function which is deterministic and out comes an address in memory.

        insert,lookup and delete is O(1)
        can't have duplicate keys.
        in java can have a null key.
        frequency of items can be solved using hash tables.

        we also have sets but only keys.

        hash function takes key and converts into an index.
        eg. modulus based on size of array.
        we can have collisions in hashing.
            can use linked list for each value called chaining.each place called a bucket or slot.where each bucket points to head of linked list.and you save key values in linked list.
            or find another position for it called open addressing.
            in open addressing: also have to save keys.
                linear probing: search for empty slot if collision,go to next slot until not found also modulus at the end.
                but what if not found,this problem is not there with chaining.
                linear probing: (hash(key)+i)%n 

                quadratic probing: (hash(key)+i^2)%n

                can go in infinite loop.
                double hashing:
                    hash2(key)=prime-(key%prime)
                    (hash1(key)+i*hash2(key))%size
                    helps with infinite loop.
    non-linear data structures:
    
    trees:
        linear-> line of items
        tree stores elements in hierarchy. called nodes and edges,and each node contains a value/data 
        there ia root node,and there are leaf nodes.

        binary tree:
            each parent has max of two children.0,1,1
        eg. file systems,databases,autocompletion,syntax tree in compilers etc 

        perfect binary tree:
            2 children each and all leaves at same level.

        binary search tree:
            left<node<right
            good for search.
            logarithmic time complexity.lookup,insert,delete O(logn)
        
        trees can be modelled using classes or struct in C.
        Tree(root),and Node(value,leftchild,rightchild)

        you can create Tree class and private Node class in it.

        tree traversal:
            breadth first: aka level order traversal,like putting things in queue.
            depth first: putting in stack.
            can be preorder node,left right, or inorder left,node,right or postorder left,right,node 

            in order on binary search tree prints sorted array.
            can be implemented using recursion.
        
            opposite of recursion is iteration.
            in recursion there is a base case eg 0 in factorial.
        
        depth of a node: from root to that root depth is 0.
        height : is opposite of it,height of leaf is 0 and for any node it is the longest path leaf nodes to that node.

        tree problems can be solved using recursion.

        AVL Trees:
            in balanced tree | height(left)-height(right) | <=1
            adding or removing elements to binary search tree could give us right skewed tree or left skewed tree.
            Adelson,velsky,Landis. it is self balancing tree. Red black trees are also self balancing.
            done by rotation.LL LR,RR,RL  and for top one,just remove element and attach to top one.
        
        HEAPS:
            the value>its children for all nodes. for max heap.
            if used in sorting then called heap sort.
            can be used to find kth smallest.
            heapify by adding to last and bubble up.
            you insert left to right,while completing the tree. insert is O(logn)=O(height)
            for deletion just replace root with last element and bubble it down via smallest child recusively.O(logn)

            heaps can be implemented using arrays.
            left=parent*2+1
            right=parent*2+2

            heap sort:
            heapify an array and remove items O(nlogn)
            heapify: convert an array into a heap.
            Kth highest element can just be by traversing the heap.
        
        Tries:comes from Retieval,aka digital,radix,prefix tree.
            used for autocompletion.
            like for words,each node having 26 children. lookup O(L) where l is length of word. same for insert and delete.
        
    
    Graphs:
        good for modelling relationships.
        {Node,Edges}
        no root nodes:
        nodes:vertex/vertices
        can be directed or undirected.
        can have cycles.
        DAG directed acyclic graph.


        Adjacency matrix: matri of 0,1 or even weights.
        but n^2 space and adding node or removing changes the matrix.
        V,E are number of vertices and edges.
        we can use hash table for translation of what is what.

        adding removing edge is O(1)
        finding neighbours O(V)
        add node O(v^2) same for removing.

        it is good if you know no. of nodes and no need to change.

        Adjancecy list:
            array of linked list,or dict of linked list.
            space O(V+E) worst case (V+E)
            to add node O(1)
            to remove node O(v+E)
            worst case (V*^2)


another teacher:
    '\0' ascii is 0. it is called null character.
    in c have to give space for null character in strings.

    sparse matrix:
    <r,c,v> then <0,0,1> etc all those who got value.

    ADT abstract data type is the definition and data structure and all operations without implementation.

    data types are set of data with predefined characteristics.

    a data structure is a way to store and organize data in computerso it can be used efficiently.

geek for geeks:
    arrays are homogenous.



        





