why go:
    go was created by google and it has interesting credentials.
    they hired ken thompson etc,people who created B,C unix etc.

    it was created for multiple machines,hence it helps with parallel computing.
    it is superfast.

    it was created to do concurrency and parallelism easily.
    their website is golang.org

    it is good for networking,system,automation,command-line tools etc.

    it is compiled.

    it is both fast and fun for humans.

    it is procedural,imperative.

    it is static and not dynamic.

development setup:

    golang playground online to run go code.
    install go
    go version
    go env 
    go help

    checksums are cool.
go workspace:
    one folder- any name:
        it has bin,pkg,src
    GOPATH should point to this folder
    GOROOT should point to go 

    install go extention in vscode.

    go run main.go 
    go get to get code from web.

freecodecamp youtube
    why new langauge:
        python,c/c++,java were cool but there are certain challenges.
        multithreading,etc are little challenges.
    go:
        strong and statically typed.
        execellent community.
        key features:
            simplicity.
            fast compile time.
            it is garbage collected,no need to manage memory.
            build-in concurrency,no library to import.
            compile to standalone binaries,all go dependencies there.
        golang makes more sense than go online as go could mean anything. 

    eg 


            package main //every go application is structured into package,and main is a special package,as it is the entry point of our program

            import (
                "fmt"   //called as fimt
            ) 

            func main(){
                fmt.println("Hello,playground")
            }//main function in main application is the entry point.

            also add bin to path. GOROOT is upto go not till bin 
            GOPATH is upto where your project folder, and in your project folder you got bin.
            go get github.com/nsf/gocode,it gives you autocomplete in go.

            you can add as many to GOPATH as you want.

            workspace needs src folder.
            bin is where binaries are created.
            pkg is where intermediate binaries are stored,they are created so they are not compiled everytime.like pycache in python.

            go extention by lukehogan is cool.

            in src create github.com under that asrar and under that first app
            as when you put it in github and someone downloads,it will create this structure.

            create Main.go 
                package main
                import "fmt"

                func main(){
                    fmt.println("hello go")
                }

                go run src/github.com/asrar..../Main.go 
                go build github/    firstapp
                ./firstapp 
                

andrei neagoie:
-----------------------------------
go: programming langauage by google to solve google sized problems.
go is known for concurrent programming.
it has package registry like npm for javascript.
it has first class concurrency primitives.
perfect for backend programming.
type safety.
garbage collected.
compiled.


installing golang:
    got to go.dev 
    download it fo your machine.
    eg 1.17
    in vscode install go extention.
    filename.go 

packages and modules:
    packages are go's way of organizing code.
    programs are written in one or more packages.
    you can import package from go package repository.
    a package should do one thing.
    to import a package:
        import "name"
        import (
            "name"
            "namespace/packageName"
        )
        if you want to use directly everything without need to use package name then put a dot before it.
        like ."name"
        to have an alias pk "namespace/packageName"
    
    modules:
        collection of packages.
        created by having a go.mod file in a root directory of your project.
        it contains info about your project, dependencies, go version, package info.
        all go projects ahe a go mod file.
        eg of go.mod file 

            module example.com/practise

            go 1.17

            require(
                github.com/alex/g v1.4.2
                github.com/fatih/c v.13.3
            )

        packages should be single program or single purpose libary.


Data types:
    a data type is a way of interpreting data.
    go is statically typed language.
    but it uses type inference.
    all primitive data types are numeric.

    signed integer types: 
        int8, int16, int, int32, int64
        int and int32 are same.

    unsigned integer types:
        uint8, byte, uint16,uint, uint32,uint64, uintptr
        uint8 byte are same size.
        uintptr starts from 0 like all, but its size is pointer size,  that is 64 for 64 bit architecture and 32 for 32 bit architecture.
    
    float:
        float32, float64, complex64 has 32 bit floating real and imaginary, complex128 has 64bit floating real and imaginary
    
    bool is true or false.


type aliases:
    possible to create type aliases,
    same in every way to another type, just a different name.
    useful for providing indication of what kind of data is being utilized.
        type UserId int 
        type Direction byte 
        type Speed float64
        type Velocity speed
    it increases readabilty.

    typecasting:
        UserId(5)
        Speed(88.3)
    

Strings and Runes:
    text encoding: UTF-8, hence variable length for each letter.
    text is represented using the rune type in go, it is similar to char.
    Rune is an alias for int32(32 bit integer)
    it is always a number if you print it.
    a rune can represent any symbol, letter, number, emoji etc.
    a string is the data type for storing multiple runes.
    it is just an array of bytes of a string length.
    there is no null termination in go string.
    a rune has 4 bytes, but in a string the extra bytes are removed just like in utf8
    thats why you go one byte at a time when iterating a string.

    creating a rune.
        Rune: 'a' 'R' '7'
        use single quote or backtick for special symbols, backtick always works though.
        Strings: "Amount is E22 \n" or "k"
        Raw literal: `let's code in "go lang" \n` here even \n is take litarally intead of a new line.
            it applies no processing to your string.

go uses utf8 

Go CLI tool:
    it is a command line utility
    for anything we want to do in go.
    commands:
        build \\will build the project and emits an executable binary.
        build -race \\checks for concurrency problems 
        run  \\runs the projects directly no output executable.
        mod \\ manges modules and dependencies
        mod tidy \\updates dependencies
        test \\ runs the projects test suite 
        fmt \\formats all source files, usually autoamate with ide.

variables:
    a way to store and acess dat ain your program.
    storing data in variable is called assignment.
    they have name, date, type.

    eg var example = 3
     var example int =3 
     var example int  //by defualt 0 
     example = 3 
     var a,b,c =1,2, "sample" //type is infered 

     block creation:
        var(
            a int =1
            b int =2
            c= "sample"
        )
        a=4
    
     create and assign:
        a:=3
        a, b:=3, "sample
    varialbe name can only be used once in a scope.

    defualt values:
        string ""
        numbers 0
        other defualt nil //it is like null 
    
    comma ok idiom:
        if you use same variable with assigining using commas for multiple then it is ok to recreate a varialbe.
        it is like resigining in a creation statement, instead of creating same again.
    
    naming:
        camel case 
            totalGuests:=22
    //for comments

    constants:
        const MaxSpeed =30 
        //use pascal naming convention.
        const AppAuther = "Bob"

functions:
    most basic building block of Go programs.
    func name(param1 type, param2, type) returntype{
        //body
    }

    eg 
        func sum(lhs, rhs int) int{
            return lhs+rhs 
        }

    calling functions:
        result:= sum(2,2)
    
    you can return multiple values 
    func a() (int, int, int){
        return 1,2,3
    }
    a,b,c := a()
        here you can use _ to ignore any of the values.
    
    camel case for naming.
    good naming convention like 
        func(data Stream, codec Codec){}
        you can use aliases to do so.
    

running a program.
    create an src folder for your folder.

    variables.go file 
        package main  //name of current package
        import "fmt" //format package, it is part of standard libary
        func main(){ //required to run your package.
            var myName = "jason"
            fmt.Println("my name is ",myName) //space added for , separated 
            var name string = "kathy"

            username := "admin"

        }   
    
    to run it:
        go run ./variables
        //it compiles and runs 



operators:
    +,-,/,% etc also got compound operators.
    i++,i--
    >, == they return true or false.
    && || !

if else:
    for flow control.
    if condition{

    }
    else{

    }
    no need to put condition in ()
    != for not equal.
    else if is also there.

statement initialization:
    if i:=5; i<10{

    }
    create assign and use in the same line
    scope as that of conditional block.

if err!=nil {

}



switch:
    switch x{
        case 1: 
            do something
        case 2:
            do something 
        default:
            do something
    }
    you can use strings etc also.
    you can even use conditionals
        case result > 10:
            do something
        case 1,2,3:
            //case list for even one of these.
        
        case 1,2,3:
            do something 
            fallthrough //it means don't check condition for next case just execute it also.

    only one of the cases is executed.

looping:
    for i:=0;i<10;i++{

    }
    for i<10{
        i++
    }
    break
    continue
    for {
        infinite loop
    }


go package registry:
    https://pkg.go.dev/std 
    import "math/rand"
    import "time"
    rand.Seed(time.Now().UnixNano())
    rand.Intn(6)//from 0 to 6 excluding 6

structures:
    to store data in groups
    they are similar to class.
    each data point is called a field.

    type Sample struct{
        field string
        a,b int
    }

    data:= Sample{"world",1,2}
    data:=Sample{
        field: "word",
        a:1,
        b:2
    }
    can use Sample{} and everything would have default value.

    to access fields, data.field, data.a, data.b you can both read and write this way.

    to create anonymous or inline structs.
    var sample struct{
        a,b int
        c string
    }

    sample:= struct{
        fields 
    }{
        "hello",
        1,2,
    }


arrays:
    for homogenous data, contineously in memory.
    index from 0
    fixed size.

    var arr [3] int 
    myarr:=[4] int{1,2,3,4}
           [...]
    if less numbers submitted rest will be set to default.
    arr[0]=1
    len(arr)
    stay in bounds of array, otherwise you get error.

    func a(x [4]room){

    }
    false is defualt value for booleans

slices:
    they enable a view into an array 
    they are dynamic in size 
    they are subset of array using indexes.
    it create a pointer to that array.
    slice[0] just like the array
    myslice:= []int{1,2,3} //this creates a slice 
    slice[a:b] omitting a means 0, and omitting b means to the end 
    slice1:=arr[:] for whole 
                [1:3] inclding first excluding second 
    you can even slice a slice.
    to append to slice append(slice, 4,5,6)
    append(slice1,slice2...)
    slice:=make([]int, 10) to preallocate size to a slice.
    len(slice)
    func iterate(slice []int){}

    multidimentioal
        board[0][1]=3
        board:=[][]int{
            {},
            {}
        }

ranges:
    for i, element:= range slice{

    }
    now we get index and element in it iteratively.

    for _, ch:= range somestring{
        here you get index and character for that string, 
        _ to ignore the index
    }
    %q in Printf to print Rune instead of the number that represents it.


Maps:
    key value pair 
    myMap := make(map[string] int)
    myMap:= map[string]int{
        "item1":1,
        "item2":2
    }
    size is dynamic 
    insert map["new"]=3
    read map["hi"] //if not there it returns default value 
    delete(map, "hi")

    check existence 
        price, found:=map["price"]
        if !found{
            not found
        }
    iteration 
    for key,value:=range map{
        maps are unordered
    }

pointers:
    function calls are pass by value in go, regardless of size of argument, even for arrays.
    so we use pointers.
    varialbes that point to other varialbes.
    
    var ptr *int 
    ptr =&value
    
    v:=&value

    func increment(x *int){
        *x+=1
    }
    increment(&x)

reciever functions:
    modified function signature which allows dot notation.
    func (coord *Coordinate) shiftBy(x,y int){
        coord.X+=x
    }
    coord.shiftBy(1,1)
        you can call above function this way.
    
    structs are passed by value.
    very common to use pointer recievers.


iota keyword:
    iota keyworld is used to automatically assign values 
    const(
        online = iota 
        offline
        maintenance
        retired
    )
    now online would be 0 offline would be 1 maintenance would be 2 and retired would be 3.
    you can also put iota for all of them and it would still work the same way.
    to skip values
    (
        s=iota
        _
        _
        s3
        s4
    )
    to start iota at different number use like iota+3 or any other thing.

variadics:
    variable length function parameters.

    func sum(nums ...int) int{
        sum:=0
        //nums now is slice of integers 
        //you can use loop to access everything.
    }


creating packages:
    create a folder your your package
    creates go files in your package

    at top 
        package packageName

        create some functions and import what you need.
        and the functions that you want to get exported, start their name with capital.
        this decides public and private.
        you can import one package in another like
        import "coursecontent/demo/pkg/display" where display was the folder name 
             you have to start from root package where our go.mod file is.
        in vscode you can directly use the function display.Display() and vscode will import it.
        in go.mod file you atleast need name of current module and the go version number.

init Function:
    init() for initialization it is ran before main() like database checks etc.
    func init(){
        do here 
    }
    each package can have its init function.
    allpackage will run init before main 

testing:
    tests are written in separate files sharing the name of the file they are testing.
        agc.go will be tested by abc_test.go 
    unit tests should be in same package.

    eg sample_test.go 
        package main 

        import "testing" 

        func TestFunctionName(t *testing.T)//this argument has to be same always {
            data:=4 
            if not desired result:
                t.Errorf("error")

        }

    to run the test:
        go test 
    test table:
        a list of multiple values for to test for.

interfaces:
    when we don't know what kind of input a function will have.
    //not done completely.

concurrency:
go routines:
    allow functions to run concurrently
    go automatically selects parallel or asynchornous

    you wrote some function.
    in main 
        go count(5) //it creates a thread of its own or run asynchornously
    calling function does't wait for it to finish.
    








    
